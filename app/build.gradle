
plugins {
	id 'org.springframework.boot' version '2.2.4.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id "com.diffplug.gradle.spotless" version "3.25.0"
	id 'idea'
	id 'jacoco'
	id 'org.asciidoctor.convert' version '1.5.3'
	id 'eclipse'
}

apply plugin: 'io.spring.dependency-management'

group = 'com.neustar'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	// https://mvnrepository.com/artifact/com.jcraft/jsch
    compile group: 'com.jcraft', name: 'jsch', version: '0.1.54'
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    // https://mvnrepository.com/artifact/com.itextpdf/itextpdf
	compile group: 'com.itextpdf', name: 'itextpdf', version: '5.5.13'
	// https://mvnrepository.com/artifact/org.apache.pdfbox/pdfbox
	compile group: 'org.apache.pdfbox', name: 'pdfbox', version: '2.0.18'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
	
}


spotless {
  java {
    googleJavaFormat()
  }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

bootJar {
    version=null

}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

test {
	useJUnitPlatform()
	outputs.dir snippetsDir
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}


jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
    }
}

sourceSets {
    itest {
        java.srcDir 'src/itest/java'
        resources.srcDir 'src/itest/resources'
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}



task integrationTest(type: Test) {
    useJUnitPlatform()
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.itest.output.classesDirs
    classpath = sourceSets.itest.runtimeClasspath
}

idea {
    module {
        testSourceDirs += sourceSets.itest.java.srcDirs
        testResourceDirs += sourceSets.itest.resources.srcDirs
        scopes.TEST.plus += [configurations.integrationTestCompile]
    }
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test




